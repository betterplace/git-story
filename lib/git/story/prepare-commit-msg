#!/usr/bin/env ruby
# Installed by the git-story gem

require 'tempfile'
require 'complex_config/rude'
include ComplexConfig::Provider::Shortcuts

class CommitMesssageParser
  def initialize
    @line_index         = 0
    @story_number_found = false
    @story_number_done  = false
    @message_data       = []
  end

  attr_reader :line_index

  def story_number_found?
    @story_number_found
  end

  def story_number_done?
    @story_number_done
  end

  def parse(template)
    @message_data = template.readlines
    @message_data.each do |line|
      if /^\s*\[.*(?:#\d{7,}).*\]/i =~ line
        @story_number_found = true
      end
      if line =~ /^\s*#/
        break
      else
        @line_index += 1
      end
    end
  ensure
    @line_index = [ @line_index - 1, 0 ].max
    return self
  end

  def data
    @message_data[0..@line_index]
  end

  def footer
    @message_data[(@line_index + 1)..-1]
  end

  def total
    data + footer
  end
end

story_numbers =
  `git branch --no-color`.sub!(/^\* .*?(?:_(\d{7,}(?:_\d{7,})*))$/) {
    break $1.split(/_/)
  } || []
story_numbers.map!(&:chomp)
Tempfile.open('commit') do |output|
  File.open(ARGV.first) do |template|
    message_parsed = CommitMesssageParser.new.parse(template)
    if message_parsed.story_number_found?
      output.puts message_parsed.total
    elsif story_numbers.empty?
      template.rewind
      output.puts template.read
    else
      full_message = [  message_parsed.data, "", ]
      if prefix = complex_config.story.pivotal_reference_prefix?
        pivotal_reference = -> number { "%s-%u" % [ prefix, number ] }
        full_message.concat(
          story_numbers.each_with_index.map { |story_number, i| "#{i + 1}. " + pivotal_reference.(story_number) }
        )
        full_message << ""
      end
      full_message <<
        "[#{story_numbers.map { |story_number| "##{story_number}" } * ' '}]" <<
        "" <<
        message_parsed.footer
      output.puts full_message
    end
    output.rewind
    File.open(ARGV.first, 'w') do |message|
      message.write output.read
    end
  end
end
